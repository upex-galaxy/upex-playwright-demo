#*🤖Este Pipeline de CI se activa al PUSHEAR o MERGEAR en ramas de tareas que no sean QA ni Main, y consiste en ejecutar los tests de una US e importar los resultados a Jira!🚀
#*👩🏻‍🔬Para utilizar este Pipeline de Ari, sigue los siguientes pasos:
#todo: 1 -> Crea tu propio archivo sanity.yml con tu username de GitHub, ejemplo sanity-saiotest.yml
#todo: 2 -> Copia el contenido de este archivo yml y pégalo en tu nuevo archivo yml con tu username.
#todo: 3 -> Modifica el trigger del Push en donde dice "TuBranchAqui", coloca tu nombre tal cual de tu rama git.
#todo: 4 -> Modifica el archivo de prueba a ejectuar en el script del "yarn test" (ver ejemplo en este archivo)
#todo: 5 -> Modifica la propiedad: "testExecKey" con tu ID del TX de Jira para importar automáticamente el resultado.
#todo: 6 -> Recuerda modificar el projectKey correspondiente, si estás en L3, debe ser GX3 y así...
#todo: 7 -> Listo! Guarda los cambios (git add + git commit) y pushea (git push) para ejectutar este Pipeline!
#*Resultado: Debería ejecutarse este Pipeline de GitHub Actions y correr cada uno de los Jobs declarados aquí.
name: 🧪Pipeline SanityTest Execution
run-name: ${{github.actor}}👨🏻‍🔬 triggered SanityTest in ${{github.ref_name}}
on:
  push:
    branches: ['TuBranchAqui'] #! Cambia "TuBranchAqui" por el nombre de tu rama de tarea.
  workflow_dispatch:
    inputs:
      testrun:
        description: 'Test Run npx playwright test'
        required: true
        default: 'tests/specs/example/spacebeyond/checkout/checkout.test.ts'
        type: string


jobs:
  TestSuite:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - name: 📘 Checkout Repo
      uses: actions/checkout@v4

    - name: 💿 Installing Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: 🍙 Bun Setup
      uses: oven-sh/setup-bun@v1

    - name: 🧬 Install Project Dependencies
      run: bun install

    - name: 🎭️ Installing Playwright And Browsers
      run: bun run pw:install

    - name: ✅ 🧪Test Suite Execution
      run: | #todo: EDITAR AQUÍ EL ARCHIVO SUITE A EJECUTAR:
        bun run test:ci ${{ github.event.inputs.testrun }}

    #* ------------------------------------
    - name: 📊 Get Allure Report History
      uses: actions/checkout@v4
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages #? the branch used for the GitHub Pages content.
        path: gh-pages #? an arbitrary name for a directory to which the previous data will be saved.

    - name: 📊 Build Allure Report
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        gh_pages: gh-pages/sanity #? the directory name to which the previous data was downloaded. Must be the same as the path value from the Get Allure Report History step
        subfolder: sanity
        allure_results: allure-results #? path to the current test results directory
        allure_report: allure-report
        allure_history: allure-history
        keep_reports: 10

    - name: 📡 Upload Artifact - Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sanity-allure-report
        path: allure-history
        retention-days: 15

    - name: 🚀 Deploy Allure Report to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages #? the branch used for the GitHub Pages content.
        destination_dir: sanity
        publish_dir: allure-history #? the directory to be published. Must be the same as the allure_history value from the Build Allure Report step
        keep_files: true
    #* ------------------------------------

    - name: ✅Import Test Results to Xray
      if: always()
      uses: mikepenz/xray-action@v3
      with:
        username: ${{secrets.XRAY_CLIENT_ID}}
        password: ${{secrets.XRAY_CLIENT_SECRET}}
        testFormat: 'junit'
        testPaths: 'test-junit-report/main-importer-report.xml'
        testExecKey: 'GX3-1533' #!Cambiar a tu TX correspondiente.
        projectKey: 'GX3' #!Cambiar a tu Proyecto Level correspondiente.
      env:
        XRAY_CLIENT: ${{ secrets.XRAY_CLIENT_SECRET }}
        XRAY_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}

    - name: 🔔Slack Notification of Done
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_USERNAME: Ari✨
        SLACK_MESSAGE: ':test_tube: Playwright: Test Execution is Done and updated in Jira :rocket:'
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://image.cdn2.seaart.ai/2023-12-06/clo9g0h4msbc73ac2sog/99e1abc36f32945cd4bacf5ee7448e96194545f7_high.webp
